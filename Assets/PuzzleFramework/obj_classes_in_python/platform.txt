class Platform:
	def __init__(self):
		self.x = 0.0
		self.y = 0.0
		self.velocity = 1
		self.distance = 600
		self.moving_right = False
		self.moving_left = False
		self.moving_up = False
		self.moving_down = False
		self.max_velocity = 10
		self.charge_level = 100
		self.action_called = False

		# IMPORTANT NOTE:
		# All action methods must be included in the actions list below.
		# The parsing function uses this list to add the pause commands 
		# to the player's code.
		# FORMAT: ".method_name("

		self.actions = [".move_right(", ".move_left(", 
						".move_up(", ".move_down("]

	def update_pos(self, new_x, new_y):
		self.x = new_x * 100
		self.y = new_y * 100

	def _reset(self):
		self.moving_right = False
		self.moving_left = False
		self.moving_up = False
		self.moving_down = False
		self.action_called = False

	def _set_init_energy(self, init_energy):
		self.charge_level = init_energy

	def clear_move(self):
		self.moving_right = False
		self.moving_left = False
		self.moving_up = False
		self.moving_down = False
		self.action_called = False

	def get_x(self):
		return self.x

	def get_y(self):
		return self.y

	def set_velocity(self, new_velocity):
		if new_velocity > 0 and new_velocity <= self.max_velocity:
			self.velocity = new_velocity
		elif new_velocity < 0:
			self.velocity = 1
		else:
			self.velocity = self.max_velocity

	def move_right(self, new_distance):
		self.distance = new_distance
		self.moving_right = True
		self.action_called = True

	def move_left(self, new_distance):
		self.distance = new_distance
		self.moving_left = True
		self.action_called = True

	def move_up(self, new_distance):
		self.distance = new_distance
		self.moving_up = True
		self.action_called = True

	def move_down(self, new_distance):
		self.distance = new_distance
		self.moving_down = True
		self.action_called = True

object = Platform()